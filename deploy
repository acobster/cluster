#!/usr/bin/env bash

#################################################
###  DEPLOY A FLYNN CLUSTER TO DIGITAL OCEAN  ###
#################################################


usage() {
  echo
  echo 'usage:'
  echo
  echo '  deploy.sh [OPTIONS] [ARGS]'
  echo
  echo '  ARGS are passed on verbatim to `terraform plan`'
  echo
  echo '  OPTIONS:'
  echo
  echo '  -h|--help show this usage text'
  echo
  echo '  -S|--skip-system-check skip checking this system for dependencies'
  echo
  echo '  -R|--skip-resource-creation skip creation of DO droplets, etc. via terraform'
  echo
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  -h|--help)
    # show usage and bail
    usage
    exit
    ;;
  -S|--skip-system-check)
    SKIP_SYSTEM_CHECK=1
    shift # past argument
    ;;
  -R|--skip-resource-creation)
    SKIP_RESOURCE_CREATION=1
    shift # past argument
    ;;
  *)
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters



main() {

  if [[ -z "$SKIP_SYSTEM_CHECK" ]]
  then
    do_system_check
  fi

  if [[ -z "$SKIP_RESOURCE_CREATION" ]]
  then
    # Initialize the cluster infrastructure with Terraform
    terraform init
    terraform plan -out=cluster.plan $@ # forward positional args
    terraform apply cluster.plan
  else
    echo 'skipping Terraform resource creation...'
  fi

  ip1="$(terraform output node_1_ipv4)"
  ip2="$(terraform output node_2_ipv4)"
  ip3="$(terraform output node_3_ipv4)"

  for ip in "$ip1" "$ip2" "$ip3"
  do
    echo "TODO install flynn on $ip..."
  done

  echo '✓ Cluster created!'
}


do_system_check() {
  echo 'checking your system...'

  if [[ -z $(which terraform) ]]
  then
    echo '✗ No terraform detected!'
    exit 1
  fi

  if [[ -z $(which ansible) ]]
  then
    echo '✗ No ansible detected!'
    exit 1
  fi

  echo '✓ System checks pass!'
}


install_flynn() {
  ssh root@"$1" -t 'bash < <(curl -fsSL https://dl.flynn.io/install-flynn)'
}



main $@
