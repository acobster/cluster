#!/usr/bin/env bash

#################################################
###  DEPLOY A FLYNN CLUSTER TO DIGITAL OCEAN  ###
#################################################


usage() {
  echo
  echo 'usage:'
  echo
  echo '  deploy.sh [OPTIONS] [ARGS]'
  echo
  echo '  ARGS are passed on verbatim to `terraform plan`'
  echo
  echo '  OPTIONS:'
  echo
  echo '  -h|--help show this usage text'
  echo
  echo '  -S|--skip-system-check skip checking this system for dependencies'
  echo
  echo '  -R|--skip-resource-creation skip creation of DO droplets, etc. via terraform'
  echo
}


POSITIONAL=()
while [[ $# -gt 0 ]]
do
key="$1"

case $key in
  -h|--help)
    # show usage and bail
    usage
    exit
    ;;
  -S|--skip-system-check)
    SKIP_SYSTEM_CHECK=1
    shift # past argument
    ;;
  -R|--skip-resource-creation)
    SKIP_RESOURCE_CREATION=1
    shift # past argument
    ;;
  *)
    POSITIONAL+=("$1") # save it in an array for later
    shift # past argument
    ;;
esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters



main() {

  if [[ -z "$SKIP_SYSTEM_CHECK" ]]
  then
    do_system_check
  fi

  DISCOVERY_URL=$(flynn-host init --init-discovery --file ./host.json)
  echo "Generated Flynn discovery token URL: ${DISCOVERY_URL}"

  if [[ -z "$SKIP_RESOURCE_CREATION" ]]
  then
    # Initialize the cluster infrastructure with Terraform
    terraform init
    terraform plan -out=cluster.plan -var discovery_url="$DISCOVERY_URL" $@ # forward positional args
    terraform apply cluster.plan

    status=$?
    if [[ $status != 0 ]]
    then
      echo 'Failed to apply Terraform plan'
      exit $status
    fi
  else
    echo 'skipping Terraform resource creation...'
  fi

  leader_ip=$(terraform output leader_node_ipv4)

  status=255 # assume failure at first
  while [[ $status != 0 ]]
  do
    echo "Waiting for ${leader_ip} to come online..."
    ssh flynn@"$leader_ip" -t echo # dummy command just to test connection
    status=$?
    sleep 1
  done

  ssh flynn@"$leader_ip" -t 'sudo /tmp/flynn-host-bootstrap.sh'

  echo '✓ Cluster created!'
}


do_system_check() {
  echo 'checking your system...'

  if [[ -z $(which terraform) ]]
  then
    echo '✗ No terraform detected!'
    exit 1
  fi

  echo '✓ System checks pass!'
}


main $@
